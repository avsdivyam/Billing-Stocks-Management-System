import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { ROUTES } from '../utils/constants';
import { motion } from 'framer-motion';
import { 
  FiPackage, FiShoppingBag, FiUsers, FiDollarSign, 
  FiAlertCircle, FiTrendingUp, FiTrendingDown, FiActivity,
  FiPlusCircle, FiBarChart2, FiCalendar, FiClock
} from 'react-icons/fi';
import { Card, Button, Badge } from '../components/ui';
import { 
  BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, 
  Tooltip, Legend, ResponsiveContainer 
} from 'recharts';

// Mock API service for dashboard data
const fetchDashboardData = () => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        totalProducts: 156,
        lowStockProducts: 12,
        totalSales: 45,
        totalPurchases: 23,
        totalCustomers: 78,
        totalVendors: 34,
        recentSales: [
          { id: 1, invoice: 'INV-001', customer: 'John Doe', amount: 1250, date: '2023-05-15', status: 'paid' },
          { id: 2, invoice: 'INV-002', customer: 'Jane Smith', amount: 850, date: '2023-05-14', status: 'pending' },
          { id: 3, invoice: 'INV-003', customer: 'Robert Johnson', amount: 2100, date: '2023-05-13', status: 'paid' },
          { id: 4, invoice: 'INV-004', customer: 'Emily Davis', amount: 1500, date: '2023-05-12', status: 'partial' },
        ],
        recentPurchases: [
          { id: 1, reference: 'PO-001', vendor: 'ABC Supplies', amount: 3500, date: '2023-05-15', status: 'received' },
          { id: 2, reference: 'PO-002', vendor: 'XYZ Distributors', amount: 2800, date: '2023-05-13', status: 'pending' },
          { id: 3, reference: 'PO-003', vendor: 'Global Traders', amount: 1950, date: '2023-05-10', status: 'received' },
        ],
        salesTrend: [
          { month: 'Jan', sales: 12500, purchases: 10000 },
          { month: 'Feb', sales: 15000, purchases: 12000 },
          { month: 'Mar', sales: 18000, purchases: 14500 },
          { month: 'Apr', sales: 16500, purchases: 13000 },
          { month: 'May', sales: 21000, purchases: 16000 },
          { month: 'Jun', sales: 19500, purchases: 15500 },
        ],
        topProducts: [
          { name: 'Product A', sales: 120, stock: 45 },
          { name: 'Product B', sales: 98, stock: 32 },
          { name: 'Product C', sales: 86, stock: 15 },
          { name: 'Product D', sales: 72, stock: 8 },
          { name: 'Product E', sales: 65, stock: 24 },
        ],
      });
    }, 1000);
  });
};

const Dashboard = () => {
  const { user } = useAuth();
  const [stats, setStats] = useState({
    totalProducts: 0,
    lowStockProducts: 0,
    totalSales: 0,
    totalPurchases: 0,
    totalCustomers: 0,
    totalVendors: 0,
    recentSales: [],
    recentPurchases: [],
    salesTrend: [],
    topProducts: [],
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadDashboardData = async () => {
      try {
        const data = await fetchDashboardData();
        setStats(data);
      } catch (error) {
        console.error('Error fetching dashboard data:', error);
      } finally {
        setLoading(false);
      }
    };

    loadDashboardData();
  }, []);

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        type: 'spring',
        stiffness: 300,
        damping: 24
      }
    }
  };

  // Status badge renderer
  const renderStatusBadge = (status) => {
    const statusConfig = {
      paid: { variant: 'success', label: 'Paid' },
      pending: { variant: 'warning', label: 'Pending' },
      partial: { variant: 'info', label: 'Partial' },
      received: { variant: 'success', label: 'Received' },
      ordered: { variant: 'info', label: 'Ordered' },
    };

    const config = statusConfig[status] || { variant: 'gray', label: status };

    return (
      <Badge variant={config.variant} size="sm" rounded>
        {config.label}
      </Badge>
    );
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-primary-500 border-t-transparent rounded-full animate-spin mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading dashboard data...</p>
        </div>
      </div>
    );
  }

  return (
    <motion.div
      className="space-y-6"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      {/* Welcome message */}
      <motion.div variants={itemVariants}>
        <Card>
          <div className="flex flex-col md:flex-row md:items-start md:justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-800">Welcome, {user?.full_name || user?.username}!</h1>
              <p className="mt-1 text-gray-600">
                Here's an overview of your business performance and key metrics.
              </p>
            </div>
            <div className="mt-4 md:mt-0 flex space-x-3">
              <Button to={ROUTES.REPORTS.SALES} variant="outline" size="sm">
                <FiBarChart2 className="mr-2" />
                View Reports
              </Button>
              <Button to={ROUTES.BILLING.NEW_SALE} variant="primary" size="sm">
                <FiPlusCircle className="mr-2" />
                New Sale
              </Button>
            </div>
          </div>
        </Card>
      </motion.div>

      {/* Stats cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {/* Products */}
        <motion.div variants={itemVariants}>
          <Card className="h-full">
            <div className="flex items-center">
              <div className="p-3 rounded-full bg-blue-100 text-blue-600">
                <FiPackage size={24} />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Total Products</p>
                <div className="flex items-center">
                  <p className="text-2xl font-semibold text-gray-800">{stats.totalProducts}</p>
                  <span className="ml-2 text-xs font-medium text-success-600 bg-success-100 px-1.5 py-0.5 rounded-full">
                    +5%
                  </span>
                </div>
              </div>
            </div>
            <div className="mt-4">
              <Link to={ROUTES.INVENTORY.PRODUCTS} className="text-sm text-primary-600 hover:text-primary-800 font-medium">
                View all products →
              </Link>
            </div>
          </Card>
        </motion.div>

        {/* Low Stock */}
        <motion.div variants={itemVariants}>
          <Card className="h-full">
            <div className="flex items-center">
              <div className="p-3 rounded-full bg-danger-100 text-danger-600">
                <FiAlertCircle size={24} />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Low Stock Items</p>
                <div className="flex items-center">
                  <p className="text-2xl font-semibold text-gray-800">{stats.lowStockProducts}</p>
                  {stats.lowStockProducts > 10 && (
                    <span className="ml-2 text-xs font-medium text-danger-600 bg-danger-100 px-1.5 py-0.5 rounded-full">
                      Critical
                    </span>
                  )}
                </div>
              </div>
            </div>
            <div className="mt-4">
              <Link to={ROUTES.INVENTORY.LOW_STOCK} className="text-sm text-primary-600 hover:text-primary-800 font-medium">
                View low stock items →
              </Link>
            </div>
          </Card>
        </motion.div>

        {/* Sales */}
        <motion.div variants={itemVariants}>
          <Card className="h-full">
            <div className="flex items-center">
              <div className="p-3 rounded-full bg-success-100 text-success-600">
                <FiTrendingUp size={24} />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Total Sales</p>
                <div className="flex items-center">
                  <p className="text-2xl font-semibold text-gray-800">{stats.totalSales}</p>
                  <span className="ml-2 text-xs font-medium text-success-600 bg-success-100 px-1.5 py-0.5 rounded-full">
                    +12%
                  </span>
                </div>
              </div>
            </div>
            <div className="mt-4">
              <Link to={ROUTES.BILLING.SALES} className="text-sm text-primary-600 hover:text-primary-800 font-medium">
                View all sales →
              </Link>
            </div>
          </Card>
        </motion.div>

        {/* Purchases */}
        <motion.div variants={itemVariants}>
          <Card className="h-full">
            <div className="flex items-center">
              <div className="p-3 rounded-full bg-purple-100 text-purple-600">
                <FiShoppingBag size={24} />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Total Purchases</p>
                <div className="flex items-center">
                  <p className="text-2xl font-semibold text-gray-800">{stats.totalPurchases}</p>
                  <span className="ml-2 text-xs font-medium text-success-600 bg-success-100 px-1.5 py-0.5 rounded-full">
                    +3%
                  </span>
                </div>
              </div>
            </div>
            <div className="mt-4">
              <Link to={ROUTES.BILLING.PURCHASES} className="text-sm text-primary-600 hover:text-primary-800 font-medium">
                View all purchases →
              </Link>
            </div>
          </Card>
        </motion.div>
      </div>

      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Sales & Purchases Trend */}
        <motion.div variants={itemVariants}>
          <Card title="Sales & Purchases Trend" className="h-full">
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart
                  data={stats.salesTrend}
                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Tooltip 
                    formatter={(value) => [`₹${value.toLocaleString()}`, undefined]}
                    labelFormatter={(label) => `Month: ${label}`}
                  />
                  <Legend />
                  <Line 
                    type="monotone" 
                    dataKey="sales" 
                    name="Sales" 
                    stroke="#6366f1" 
                    strokeWidth={2}
                    activeDot={{ r: 8 }} 
                  />
                  <Line 
                    type="monotone" 
                    dataKey="purchases" 
                    name="Purchases" 
                    stroke="#8b5cf6" 
                    strokeWidth={2}
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </Card>
        </motion.div>

        {/* Top Products */}
        <motion.div variants={itemVariants}>
          <Card title="Top Selling Products" className="h-full">
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={stats.topProducts}
                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="sales" name="Sales" fill="#6366f1" radius={[4, 4, 0, 0]} />
                  <Bar dataKey="stock" name="Current Stock" fill="#10b981" radius={[4, 4, 0, 0]} />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </Card>
        </motion.div>
      </div>

      {/* Recent transactions */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Recent Sales */}
        <motion.div variants={itemVariants}>
          <Card 
            title="Recent Sales" 
            action={
              <Button to={ROUTES.BILLING.SALES} variant="outline" size="sm">
                View All
              </Button>
            }
          >
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead>
                  <tr>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Invoice
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Customer
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Amount
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Date
                    </th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  {stats.recentSales.map((sale) => (
                    <tr key={sale.id} className="hover:bg-gray-50">
                      <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-primary-600">
                        <Link to={`${ROUTES.BILLING.SALES}/${sale.id}`}>
                          {sale.invoice}
                        </Link>
                      </td>
                      <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">
                        {sale.customer}
                      </td>
                      <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">
                        ₹{sale.amount.toLocaleString()}
                      </td>
                      <td className="px-4 py-3 whitespace-nowrap text-sm">
                        {renderStatusBadge(sale.status)}
                      </td>
                      <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">
                        {new Date(sale.date).toLocaleDateString()}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </Card>
        </motion.div>

        {/* Recent Purchases */}
        <motion.div variants={itemVariants}>
          <Card 
            title="Recent Purchases" 
            action={
              <Button to={ROUTES.BILLING.PURCHASES} variant="outline" size="sm">
                View All
              </Button>
            }
          >
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead>
                  <tr>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Reference
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Vendor
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Amount
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Date
                    </th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  {stats.recentPurchases.map((purchase) => (
                    <tr key={purchase.id} className="hover:bg-gray-50">
                      <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-primary-600">
                        <Link to={`${ROUTES.BILLING.PURCHASES}/${purchase.id}`}>
                          {purchase.reference}
                        </Link>
                      </td>
                      <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">
                        {purchase.vendor}
                      </td>
                      <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">
                        ₹{purchase.amount.toLocaleString()}
                      </td>
                      <td className="px-4 py-3 whitespace-nowrap text-sm">
                        {renderStatusBadge(purchase.status)}
                      </td>
                      <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">
                        {new Date(purchase.date).toLocaleDateString()}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </Card>
        </motion.div>
      </div>

      {/* Quick Actions */}
      <motion.div variants={itemVariants}>
        <Card title="Quick Actions">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <Link
              to={ROUTES.BILLING.NEW_SALE}
              className="flex flex-col items-center p-4 bg-primary-50 rounded-lg hover:bg-primary-100 transition-colors"
            >
              <FiDollarSign size={24} className="text-primary-600 mb-2" />
              <span className="text-sm font-medium text-gray-700">New Sale</span>
            </Link>
            
            <Link
              to={ROUTES.BILLING.NEW_PURCHASE}
              className="flex flex-col items-center p-4 bg-purple-50 rounded-lg hover:bg-purple-100 transition-colors"
            >
              <FiShoppingBag size={24} className="text-purple-600 mb-2" />
              <span className="text-sm font-medium text-gray-700">New Purchase</span>
            </Link>
            
            <Link
              to={ROUTES.INVENTORY.PRODUCTS}
              className="flex flex-col items-center p-4 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors"
            >
              <FiPackage size={24} className="text-blue-600 mb-2" />
              <span className="text-sm font-medium text-gray-700">Add Product</span>
            </Link>
            
            <Link
              to={ROUTES.REPORTS.SALES}
              className="flex flex-col items-center p-4 bg-success-50 rounded-lg hover:bg-success-100 transition-colors"
            >
              <FiActivity size={24} className="text-success-600 mb-2" />
              <span className="text-sm font-medium text-gray-700">Sales Report</span>
            </Link>
          </div>
        </Card>
      </motion.div>
    </motion.div>
  );
};

export default Dashboard;